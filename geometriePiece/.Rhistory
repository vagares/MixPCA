?round
nb  = c(29,30,29,30)
#########################
round(nb[1]/3)
28/3
round(28/3)
round(115/12)
round(29/3)
## packages
library(readxl)
library(fda)
library(viridis)
library(FactoMineR)
library(knitr)
library(CCA)
knitr::opts_knit$set(root.dir = "~/GitHub/MixPCA")  ### CHEMIN A MODIFIER
opts_chunk$set(error=TRUE,comment=NA)
source("~/GitHub/MixPCA/2_estimators.r")  ### CHEMIN A MODIFIER
geom = readxl::read_xlsx("geometriePiece/ResultsAddedForExcel.xlsx",col_names=TRUE,skip=1)
colnames(geom)[1] = "type"
geom$type = as.factor(geom$type)
geom = split(geom,geom$type)$P225M909
Xgeom = geom[,2:4]
Y = geom[,5:ncol(geom)]
Gap = seq(30,7,by=-0.5)
matplot(Gap,t(Y),type="l",col = "steelblue",lwd=0.25,lty=1,xlab="Gap (mm)",ylab="Efforts (N)")
NAcurve = sort(unique(which(is.na(Y),arr.ind = TRUE)[,1]))
for (i in NAcurve){Y[i,which(is.na(Y[i,]))] = Y[i,min(which(is.na(Y[i,])))-1]}
# summary(Y) # OK, plus de donnees manquantes
splbasis = create.bspline.basis(rangeval=range(Gap),norder=4,breaks=seq(min(Gap),max(Gap),length=12))
gcv = 1:21
for (i in 1:21){
lambda = exp(i-10)
fdparTemp = fdPar(splbasis,Lfdobj = 2,lambda=lambda)
smoothdata = smooth.basis(argvals=Gap,t(Y),fdParobj = fdparTemp)
gcv[i] = mean(smoothdata$gcv)
}
lambda = exp(which.min(gcv)-10)
fdparTemp = fdPar(splbasis,Lfdobj = 2,lambda=lambda)
smoothdata = smooth.basis(argvals=Gap,t(Y),fdParobj = fdparTemp)
# plotfit.fd(t(Y),Gap,smoothdata$fd,pch=20,cex=0.5) #on est tres proche de l'interpolation
Ycoef = t(smoothdata$fd$coefs)
dim(Ycoef) # 14 coefficients pour n individus
#data = cbind(Ycoef,Xgeom)
#K=3;maxits=100;tol=1e-4; q = 3;p=14;nx=3
#est0 = estimates(cbind(Ycoef,Xgeom),K=3,par_init=NULL,maxits=300,
#                 tol=1e-4,
#                 q = 3,
#                 p=14,
#                 nx=3,
#                 cste = TRUE,
#                 verbose=TRUE)
#save(est0,file="geometriePiece/resultsGeom-31052023.Rdata")
load("geometriePiece/resultsGeom-31052023.Rdata")
couleur = c("coral1","palegreen3","steelblue")
matplot(Gap,t(Y),type="l",col=couleur[est0$G],lwd=0.4,lty=1,xlab="Gap (mm)",ylab="Efforts (N)")
par(mfrow=c(1,3))
for (i in 1:length(est0$piik)){
matplot(Gap,t(Y[which(est0$G==i),]),type="l",col=couleur[i],ylim=c(0,42),lwd=0.4,lty=1,xlab="Gap (mm)",ylab="Efforts (N)")
}
grpe = 1 # a fixer suivant le groupe sur lequel on se concentre
index.gpe = which(est0$G==grpe)
print(paste("Le groupe ", grpe," contient ", length(index.gpe), " individus"))
matplot(Gap,t(Y)[,index.gpe],type="l",col="steelblue",lty=1,lwd=0.4,xlab="Gap (mm)",ylab="Efforts (N)")
#reconstruction des courbes moyennes fonctionnelles
splbasis = create.bspline.basis(rangeval=range(Gap),norder=4,breaks=seq(min(Gap),max(Gap),length=12))
mufct = sapply(est0$mu,FUN=function(x) {ft =fd(x,splbasis) ; return(eval.fd(Gap,ft))})
#ajout moyenne groupe 2
lines(Gap,mufct[,grpe],col="red",lwd=1)
YcoefG = scale(Ycoef[index.gpe,])
XgeomG = scale(Xgeom[index.gpe,])
crosscor = matcor(YcoefG,XgeomG)
img.matcor(crosscor,type=2)
cc1 <- cc(XgeomG,YcoefG)
barplot(cc1$cor, xlab = "Dimension", ylab = "Canonical correlations", ylim = c(0,1))
cc1$cor
t(cc1$xcoef)%*%cc1$xcoef
cc1$xcoef
t(cc1$xcoef)%*%cc1$xcoef
cc1$xcoef
t(cc1$xcoef)%*%cc1$xcoef
cc1$xcoef%*%t(cc1$xcoef)
Qy = cc1$ycoef
Qy
cc1$ycoef%*%t(cc1$ycoef)
Qy = cc1$ycoef
Qy
image(cc1$ycoef%*%t(cc1$ycoef))
Qy = cc1$ycoef
Qy
image(t(cc1$ycoef)%*%cc1$ycoef)
Qy = cc1$ycoef
Qy
# Affichage des corrélations canoniques
cor(cc1$scores$xscores,cc1$scores$yscores)
dim(cc1$scores$xscores)
Qy = cc1$ycoef
Qy
t(cc1$scores$yscores)%*%YcoefG
cor(V)
V = t(cc1$scores$yscores)%*%YcoefG
cor(V)
cor(t(V))
Qy = cc1$ycoef
Qy
cc1$ycoef%*%t(cc1$ycoef)
V = t(cc1$scores$yscores)%*%YcoefG
cor(t(V))
Qy = cc1$ycoef
Qy
t(cc1$ycoef)%*%cc1$ycoef
V = t(cc1$scores$yscores)%*%YcoefG
cor(t(V))
grpe = 2 # a fixer suivant le groupe sur lequel on se concentre
index.gpe = which(est0$G==grpe)
print(paste("Le groupe ", grpe," contient ", length(index.gpe), " individus"))
matplot(Gap,t(Y)[,index.gpe],type="l",col="steelblue",lty=1,lwd=0.4,xlab="Gap (mm)",ylab="Efforts (N)")
#reconstruction des courbes moyennes fonctionnelles
splbasis = create.bspline.basis(rangeval=range(Gap),norder=4,breaks=seq(min(Gap),max(Gap),length=12))
mufct = sapply(est0$mu,FUN=function(x) {ft =fd(x,splbasis) ; return(eval.fd(Gap,ft))})
#ajout moyenne groupe 2
lines(Gap,mufct[,grpe],col="red",lwd=1)
YcoefG = scale(Ycoef[index.gpe,])
XgeomG = scale(Xgeom[index.gpe,])
crosscor = matcor(YcoefG,XgeomG)
img.matcor(crosscor,type=2)
cc1 <- cc(XgeomG,YcoefG)
dim(YcoefG)
crosscor = matcor(YcoefG[,1:9],XgeomG)
img.matcor(crosscor,type=2)
cc1 <- cc(XgeomG,YcoefG[,1:9]) # on enlève les 5 derniers coefs (singulrite matrice)
barplot(cc1$cor, xlab = "Dimension", ylab = "Canonical correlations", ylim = c(0,1))
cc1$cor
# Affichage des corrélations canoniques
cor(cc1$scores$xscores,cc1$scores$yscores)
dim(cc1$scores$xscores)
cc1$xcoef
t(cc1$xcoef)%*%cc1$xcoef
cc1$xcoef%*%t(cc1$xcoef)
cc1$xcoef
#t(cc1$xcoef)%*%cc1$xcoef # orthogonalite?
#cc1$xcoef%*%t(cc1$xcoef) # orthogonalite?
Qy = cc1$ycoef
Qy
#t(cc1$ycoef)%*%cc1$ycoef
#V = t(cc1$scores$yscores)%*%YcoefG
#cor(t(V))
YcoefG
setwd("~/GitHub/MixPCA/geometriePiece")
Ycoeffin = apply(YcoefG,2,mean)
Ycoeffin
nrj = read.csv("/home/madison/PLMbox/enseignement/SUED Geo/2022-2023/pic-journalier-consommation-brute.csv")
nrj$Date = as.Date(nrj$Date)
nrj2022 = nrj[(nrj$Date>"2022-01-01" & nrj$Date<"2022-04-01"),]
nrj2022$Pic.journalier.consommation..MW. = nrj2022$Pic.journalier.consommation..MW./1000
plot(nrj2022[,3],nrj2022[,2],pch=20,xlab="temperature moyenne (°C)",ylab="consommation electrique (GW)")
reg = lm(nrj2022[,2]~nrj2022[,3])
summary(reg)
x = nrj2022[,3]
y = nrj2022[,2]
mean(x)
mean(y)
var(x)*(length(x)-1)/length(x)
var(y)*(length(x)-1)/length(x)
cov(x,y)*(length(x)-1)/length(x)
x2005 = c(2658882,1562801,1052285)
x2020 = c(2524500,1960300,1210800)
sum(x2005) #total
sum(x2020)
round(x2005/sum(x2005),digits=4) # frequence
# 0.12 0.03 0.29 0.37 0.19
round(x2020/sum(x2020),digits=4)
round(x2005/sum(x2005),digits=5) # frequence
# [1] 0.5042 0.2963 0.1995
round(x2020/sum(x2020),digits=5)
cumsum(round(x2020/sum(x2020),digits=5))
# reponses
rxy = -20.678/sqrt(65.509*9.294)
rxy
summary(lm(y~x))
-20.678/9.294
a = -20.678/9.294
b = mean(y)-a*mean(x)
a
b
r2 = rxy^2
r2 = rxy^2 ; r2
y0
y0 = a*9+87.635
y0
