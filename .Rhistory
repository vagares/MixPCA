colnames(geom)[1] = "type"
geom$type = as.factor(geom$type)
### on prend 1 cahoutchouc (le premier)
geom = split(geom,geom$type)$P225M909
Xgeom = geom[,2:4]
Y = geom[,5:ncol(geom)]
Gap = seq(30,7,by=-0.5)
### on remplace les donnees manquantes par un plateau (justification physique)
NAcurve = sort(unique(which(is.na(Y),arr.ind = TRUE)[,1]))
for (i in NAcurve){Y[i,which(is.na(Y[i,]))] = Y[i,min(which(is.na(Y[i,])))-1]}
################ graphes tidyfun ##############################################
geom = tibble(
height = X$Height,
shape = X$Shape,
thickness = X$Thickness)
geom$effort = tfd(as.matrix(Y), arg = Gap)
geom_curve =
geom %>%
ggplot(aes(tf = effort)) + geom_spaghetti(alpha=0.15,color = "steelblue")
geom_curve+xlab("Gap (mm)")+ylab("Efforts (N)")
### projection dans une base de splines pour obtenir des coefficients splines (smoothing penalise)
splbasis = create.bspline.basis(rangeval=range(Gap),norder=4,breaks=seq(min(Gap),max(Gap),length=12))
gcv = 1:21
for (i in 1:21){
lambda = exp(i-10)
fdparTemp = fdPar(splbasis,Lfdobj = 2,lambda=lambda)
smoothdata = smooth.basis(argvals=Gap,t(Y),fdParobj = fdparTemp)
gcv[i] = mean(smoothdata$gcv)
}
lambda = exp(which.min(gcv)-10)
fdparTemp = fdPar(splbasis,Lfdobj = 2,lambda=lambda)
smoothdata = smooth.basis(argvals=Gap,t(Y),fdParobj = fdparTemp)
Ycoef = t(smoothdata$fd$coefs)
dim(Ycoef) # 14 coefficients pour n individus
### on estime avec mixPCA
data = cbind(Ycoef,Xgeom)
K=3;maxits=100;tol=1e-4; q = 3;p=14;nx=3
est0 = estimates(cbind(Ycoef,Xgeom),K=3,par_init=NULL,maxits=300,
tol=1e-4,
q = 3,
p=14,
nx=3,
cste = TRUE,
verbose=TRUE)
library(FactoMineR)
est0 = estimates(cbind(Ycoef,Xgeom),K=3,par_init=NULL,maxits=300,
tol=1e-4,
q = 3,
p=14,
nx=3,
cste = TRUE,
verbose=TRUE)
load("geometriePiece/resultsGeom-31052023.Rdata")
est0$piik  # taille des groupes
est0$theta2
est0$sigma2i
apply(est0$tau,1,max) # les probas d'appartenance sont plutot tranchées, 17 indiv sur 498 avec proba max <0.95
#### CLUSTERING
# graphique des courbes de départ par groupe
matplot(Gap,t(Y),type="l",col=est0$G)
par(mfrow=c(1,3))
for (i in 1:K){
matplot(Gap,t(Y[which(est0$G==i),]),type="l",col=i,ylab="Efforts",ylim=c(0,42))
}
#### MOYENNES MU
est0$mu #moyenne par groupe (en coefficients splines, sous forme de liste)
#reconstruction des courbes moyennes fonctionnelles
splbasis = create.bspline.basis(rangeval=range(Gap),norder=4,breaks=seq(min(Gap),max(Gap),length=12))
mufct = sapply(est0$mu,FUN=function(x) {ft =fd(x,splbasis) ; return(eval.fd(Gap,ft))})
# representation
layout(matrix(c(1,1,1,2,3,4),ncol=2,nrow=3))
matplot(Gap,mufct,type="l",ylab="moyennes fonctionnelles",lty=1,col=c("coral1","palegreen3","steelblue"))
abline(h=0,lwd=0.5,lty=3)
couleur = c("coral1","palegreen3","steelblue")
for (i in 1:K){
par(mar=c(2,2,1,1))
matplot(Gap,t(Y[which(est0$G==i),]),type="l",col=couleur[i],ylab="Efforts",ylim=c(0,42),lwd=0.5)
lines(Gap,mufct[,i],lwd=2)
}
install.packages("CCA")
index.gpe2 = which(est0$G==2)
index.gpe2
length(index.gpe2)
dim(t(Y))
index.gpe2 = which(est0$G==2) # 179 individus
matplot(Gap,t(Y)[,index.gpe2],type="l",col="steelblue")
dim(mufct)
index.gpe2 = which(est0$G==2) # 179 individus
matplot(Gap,t(Y)[,index.gpe2],type="l",col="steelblue")
#reconstruction des courbes moyennes fonctionnelles
splbasis = create.bspline.basis(rangeval=range(Gap),norder=4,breaks=seq(min(Gap),max(Gap),length=12))
mufct = sapply(est0$mu,FUN=function(x) {ft =fd(x,splbasis) ; return(eval.fd(Gap,ft))})
#ajout moyenne groupe 2
lines(Gap,mufct[,2],col="red",lwd=2)
dim(Ycoef)
YcoefG2 = Ycoef[index.gpe2,]
dim(Xgeom)
pairs(YcoefG2)
pairs(XgeomG2)
YcoefG2 = Ycoef[index.gpe2,]
XgeomG2 = Xgeom[index.gpe2,]
pairs(YcoefG2)
pairs(XgeomG2)
matcor(YcoefG2,XgeomG2)
## packages
library(readxl)
library(fda)
library(tidyfun)
library(viridis)
library(tidyverse)
library(FactoMineR)
library(knitr)
library(CCA)
knitr::opts_knit$set(root.dir = "~/GitHub/MixPCA")
opts_chunk$set(error=TRUE,comment=NA)
source("2_estimators.r")
## packages
library(readxl)
library(fda)
library(tidyfun)
library(viridis)
library(tidyverse)
library(FactoMineR)
library(knitr)
library(CCA)
knitr::opts_knit$set(root.dir = "~/GitHub/MixPCA")
opts_chunk$set(error=TRUE,comment=NA)
source("~/GitHub/MixPCA/2_estimators.r")
pairs(YcoefG2)
pairs(XgeomG2)
matcor(YcoefG2,XgeomG2)
crosscor = matcor(YcoefG2,XgeomG2)
image(crosscor$XYcor)
crosscor = matcor(YcoefG2,XgeomG2)
crosscor$XYcor
image(crosscor$XYcor)
crosscor = matcor(YcoefG2,XgeomG2)
crosscor$XYcor
image(crosscor$XYcor)
abline(h=13/17,lwd=2)
13/17
?image
seq(0,1,length=17)
13/17
seq(0,1,length=18)
14/17
crosscor = matcor(YcoefG2,XgeomG2)
crosscor$XYcor
image(crosscor$XYcor)
abline(h=14/17,lwd=2)
crosscor = matcor(YcoefG2,XgeomG2)
crosscor$XYcor
image(crosscor$XYcor)
abline(h=0.83,lwd=2)
crosscor = matcor(YcoefG2,XgeomG2)
crosscor$XYcor
image(crosscor$XYcor)
abline(h=0.84,lwd=2)
crosscor = matcor(YcoefG2,XgeomG2)
crosscor$XYcor
image(crosscor$XYcor)
abline(h=0.84,lwd=2)
abline(v=0.84,lwd=2)
crosscor = matcor(YcoefG2,XgeomG2)
crosscor$XYcor
image(crosscor$XYcor)
abline(h=0.84,lwd=3)
abline(v=0.84,lwd=3)
crosscor = matcor(YcoefG2,XgeomG2)
crosscor$XYcor
image(crosscor$XYcor)
abline(h=0.84,lwd=3)
abline(v=0.842,lwd=3)
cc1 <- cc(YcoefG2,XgeomG2)
??cc
??cc
?cc
cc1 <- cc(XgeomG2,YcoefG2)
matplot(Gap,t(Y),type="l",col=est0$G)
par(mfrow=c(1,3))
for (i in 1:K){
matplot(Gap,t(Y[which(est0$G==i),]),type="l",col=i,ylab="Efforts",ylim=c(0,42))
}
grpe = 1 # a fixer suivant le groupe sur lequel on se concentre
index.gpe = which(est0$G==grpe) # 179 individus
matplot(Gap,t(Y)[,index.gpe],type="l",col="steelblue")
#reconstruction des courbes moyennes fonctionnelles
splbasis = create.bspline.basis(rangeval=range(Gap),norder=4,breaks=seq(min(Gap),max(Gap),length=12))
mufct = sapply(est0$mu,FUN=function(x) {ft =fd(x,splbasis) ; return(eval.fd(Gap,ft))})
#ajout moyenne groupe 2
lines(Gap,mufct[,grpe],col="red",lwd=2)
YcoefG = Ycoef[index.gpe,]
XgeomG = Xgeom[index.gpe,]
pairs(YcoefG)
pairs(XgeomG)
grpe = 1 # a fixer suivant le groupe sur lequel on se concentre
index.gpe = which(est0$G==grpe)
length(index.gpe)
grpe = 1 # a fixer suivant le groupe sur lequel on se concentre
index.gpe = which(est0$G==grpe)
print(paste("Le groupe ,", grpe," contient ", length(index.gpe), " individus"))
grpe = 1 # a fixer suivant le groupe sur lequel on se concentre
index.gpe = which(est0$G==grpe)
print(paste("Le groupe ", grpe," contient ", length(index.gpe), " individus"))
matplot(Gap,t(Y)[,index.gpe],type="l",col="steelblue")
#reconstruction des courbes moyennes fonctionnelles
splbasis = create.bspline.basis(rangeval=range(Gap),norder=4,breaks=seq(min(Gap),max(Gap),length=12))
mufct = sapply(est0$mu,FUN=function(x) {ft =fd(x,splbasis) ; return(eval.fd(Gap,ft))})
#ajout moyenne groupe 2
lines(Gap,mufct[,grpe],col="red",lwd=2)
YcoefG = Ycoef[index.gpe,]
XgeomG = Xgeom[index.gpe,]
pairs(YcoefG)
crosscor = matcor(YcoefG,XgeomG)
crosscor$XYcor
image(crosscor$XYcor)
abline(h=0.84,lwd=3)
abline(v=0.842,lwd=3)
cc1 <- cc(YcoefG,XgeomG)
cc1 <- cc(YcoefG,XgeomG)
# Affichage des corrélations canoniques
cc1$cor
cor(cc1$scores$xscores,cc1$scores$yscores)
# Affichage des corrélations canoniques
cc1$cor
cor(cc1$scores$xscores,cc1$scores$yscores)
cc1$xcoef
cc1$ycoef
cc1$scores$xscores
cc1$scores$yscores
cc1 <- cc(XcoefG,YgeomG)
## packages
library(readxl)
library(fda)
library(tidyfun)
library(viridis)
library(tidyverse)
library(FactoMineR)
library(knitr)
library(CCA)
knitr::opts_knit$set(root.dir = "~/GitHub/MixPCA")
opts_chunk$set(error=TRUE,comment=NA)
source("~/GitHub/MixPCA/2_estimators.r")
geom = readxl::read_xlsx("geometriePiece/ResultsAddedForExcel.xlsx",col_names=TRUE,skip=1)
colnames(geom)[1] = "type"
geom$type = as.factor(geom$type)
geom = split(geom,geom$type)$P225M909
Xgeom = geom[,2:4]
Y = geom[,5:ncol(geom)]
Gap = seq(30,7,by=-0.5)
# matplot(Gap,t(Y),type="l")
NAcurve = sort(unique(which(is.na(Y),arr.ind = TRUE)[,1]))
for (i in NAcurve){Y[i,which(is.na(Y[i,]))] = Y[i,min(which(is.na(Y[i,])))-1]}
# summary(Y) # OK, plus de donnees manquantes
################ graphes tidyfun ##############################################
geom = tibble(
height = X$Height,
shape = X$Shape,
thickness = X$Thickness)
geom$effort = tfd(as.matrix(Y), arg = Gap)
geom_curve =
geom %>%
ggplot(aes(tf = effort)) + geom_spaghetti(alpha=0.15,color = "steelblue")
geom_curve+xlab("Gap (mm)")+ylab("Efforts (N)")
###############################################################################
splbasis = create.bspline.basis(rangeval=range(Gap),norder=4,breaks=seq(min(Gap),max(Gap),length=12))
gcv = 1:21
for (i in 1:21){
lambda = exp(i-10)
fdparTemp = fdPar(splbasis,Lfdobj = 2,lambda=lambda)
smoothdata = smooth.basis(argvals=Gap,t(Y),fdParobj = fdparTemp)
gcv[i] = mean(smoothdata$gcv)
}
lambda = exp(which.min(gcv)-10)
fdparTemp = fdPar(splbasis,Lfdobj = 2,lambda=lambda)
smoothdata = smooth.basis(argvals=Gap,t(Y),fdParobj = fdparTemp)
# plotfit.fd(t(Y),Gap,smoothdata$fd,pch=20,cex=0.5) #on est tres proche de l'interpolation
Ycoef = t(smoothdata$fd$coefs)
dim(Ycoef) # 14 coefficients pour n individus
#data = cbind(Ycoef,Xgeom)
#K=3;maxits=100;tol=1e-4; q = 3;p=14;nx=3
#est0 = estimates(cbind(Ycoef,Xgeom),K=3,par_init=NULL,maxits=300,
#                 tol=1e-4,
#                 q = 3,
#                 p=14,
#                 nx=3,
#                 cste = TRUE,
#                 verbose=TRUE)
#save(est0,file="geometriePiece/resultsGeom-31052023.Rdata")
load("geometriePiece/resultsGeom-31052023.Rdata")
matplot(Gap,t(Y),type="l",col=est0$G)
par(mfrow=c(1,3))
for (i in 1:K){
matplot(Gap,t(Y[which(est0$G==i),]),type="l",col=i,ylab="Efforts",ylim=c(0,42))
}
grpe = 1 # a fixer suivant le groupe sur lequel on se concentre
index.gpe = which(est0$G==grpe)
print(paste("Le groupe ", grpe," contient ", length(index.gpe), " individus"))
matplot(Gap,t(Y)[,index.gpe],type="l",col="steelblue")
#reconstruction des courbes moyennes fonctionnelles
splbasis = create.bspline.basis(rangeval=range(Gap),norder=4,breaks=seq(min(Gap),max(Gap),length=12))
mufct = sapply(est0$mu,FUN=function(x) {ft =fd(x,splbasis) ; return(eval.fd(Gap,ft))})
#ajout moyenne groupe 2
lines(Gap,mufct[,grpe],col="red",lwd=2)
YcoefG = Ycoef[index.gpe,]
XgeomG = Xgeom[index.gpe,]
pairs(YcoefG)
pairs(XgeomG)
crosscor = matcor(YcoefG,XgeomG)
crosscor$XYcor
image(crosscor$XYcor)
abline(h=0.84,lwd=3)
abline(v=0.842,lwd=3)
cc1 <- cc(XcoefG,YgeomG)
cc1 <- cc(XgeomG,YgeomG)
cc1 <- cc(XgeomG,YcoefG)
# Affichage des corrélations canoniques
cc1$cor
cor(cc1$scores$xscores,cc1$scores$yscores)
cc1$xcoef
cc1$ycoef
Qfct = apply(Qy,2,FUN=function(x) {ft =fd(x,splbasis) ; return(eval.fd(Gap,ft))})
Qy = cc1$ycoef
Qfct = apply(Qy,2,FUN=function(x) {ft =fd(x,splbasis) ; return(eval.fd(Gap,ft))})
dim(Qfct)
Qfct = apply(Qy,2,FUN=function(x) {ft =fd(x,splbasis) ; return(eval.fd(Gap,ft))})
matplot(Gap,Qfct,col=c("coral1","palegreen3","steelblue"))
Qfct = apply(Qy,2,FUN=function(x) {ft =fd(x,splbasis) ; return(eval.fd(Gap,ft))})
matplot(Gap,Qfct,col=c("coral1","palegreen3","steelblue"),type="l")
matplot(Gap,t(Y)[,index.gpe],type="l",col="gray",ylab="Efforts",ylim=c(0,42),lwd=0.5)
lines(Gap,mufct[,k],col=1)
for(i in 1:3){
matplot(Gap,t(Y)[,index.gpe],type="l",col="gray",ylab="Efforts",ylim=c(0,42),lwd=0.5)
lines(Gap,mufct[,grpe],col=1)
lines(Gap,mufct[,grpe]+4*Qfct[,i],type="p",pch="+",col=i)
lines(Gap,mufct[,grpe]-4*Qfct[,i],type="p",pch="-",col=i,lwd=2)
}
for(i in 1:3){
matplot(Gap,t(Y)[,index.gpe],type="l",col="gray",ylab="Efforts",ylim=c(0,42),lwd=0.5)
lines(Gap,mufct[,grpe],col=1)
lines(Gap,mufct[,grpe]+10*Qfct[,i],type="p",pch="+",col=i)
lines(Gap,mufct[,grpe]-10*Qfct[,i],type="p",pch="-",col=i,lwd=2)
}
23/120
22/120
## packages
library(readxl)
library(fda)
library(tidyfun)
library(viridis)
library(tidyverse)
library(FactoMineR)
library(knitr)
library(CCA)
knitr::opts_knit$set(root.dir = "~/GitHub/MixPCA")
opts_chunk$set(error=TRUE,comment=NA)
source("~/GitHub/MixPCA/2_estimators.r")
geom = readxl::read_xlsx("geometriePiece/ResultsAddedForExcel.xlsx",col_names=TRUE,skip=1)
colnames(geom)[1] = "type"
geom$type = as.factor(geom$type)
?read_xlsx
geom = split(geom,geom$type)$P225M909
Xgeom = geom[,2:4]
Y = geom[,5:ncol(geom)]
Gap = seq(30,7,by=-0.5)
# matplot(Gap,t(Y),type="l")
################ graphes tidyfun ##############################################
geom = tibble(
height = X$Height,
shape = X$Shape,
thickness = X$Thickness)
geom$effort = tfd(as.matrix(Y), arg = Gap)
geom_curve =
geom %>%
ggplot(aes(tf = effort)) + geom_spaghetti(alpha=0.15,color = "steelblue")
geom_curve+xlab("Gap (mm)")+ylab("Efforts (N)")
###############################################################################
geom = split(geom,geom$type)$P225M909
Xgeom = geom[,2:4]
Y = geom[,5:ncol(geom)]
Gap = seq(30,7,by=-0.5)
matplot(Gap,t(Y),type="l")
geom = split(geom,geom$type)$P225M909
Xgeom = geom[,2:4]
Y = geom[,5:ncol(geom)]
Gap = seq(30,7,by=-0.5)
matplot(Gap,Y,type="l")
geom = split(geom,geom$type)$P225M909
Xgeom = geom[,2:4]
Y = geom[,5:ncol(geom)]
Gap = seq(30,7,by=-0.5)
matplot(t(Gap),t(Y),type="l")
geom = split(geom,geom$type)$P225M909
Xgeom = geom[,2:4]
Y = geom[,5:ncol(geom)]
Gap = seq(30,7,by=-0.5)
matplot(Gap,t(Y),type="l")
?matplot
geom = split(geom,geom$type)$P225M909
Xgeom = geom[,2:4]
Y = geom[,5:ncol(geom)]
Gap = seq(30,7,by=-0.5)
graphics::matplot(Gap,t(Y),type="l")
Gap
length(Gap)
dim(Y)
View(geom)
## packages
library(readxl)
library(fda)
library(tidyfun)
library(viridis)
library(tidyverse)
library(FactoMineR)
library(knitr)
library(CCA)
knitr::opts_knit$set(root.dir = "~/GitHub/MixPCA")  ### CHEMIN A MODIFIER
opts_chunk$set(error=TRUE,comment=NA)
source("~/GitHub/MixPCA/2_estimators.r")  ### CHEMIN A MODIFIER
geom = readxl::read_xlsx("geometriePiece/ResultsAddedForExcel.xlsx",col_names=TRUE,skip=1)
colnames(geom)[1] = "type"
geom$type = as.factor(geom$type)
View(geom)
View(Y)
View(Y[[48]][[1]])
View(geom)
geom = readxl::read_xlsx("geometriePiece/ResultsAddedForExcel.xlsx",col_names=TRUE,skip=1)
colnames(geom)[1] = "type"
geom$type = as.factor(geom$type)
View(geom)
summary(geom)
dim(geom)
geom = split(geom,geom$type)$P225M909
summary(geom)
dim(geom)
Xgeom = geom[,2:4]
dim(Xgeom)
ncol(geom)
5:ncol(geom)
length(5:ncol(geom))
Y = geom[,5:ncol(geom)]
dim(Y)
summary(Y)
Gap = seq(30,7,by=-0.5)
length(Gap)
matplot(Gap,t(Y),type="l")
################ graphes tidyfun ##############################################
geom = tibble(
height = X$Height,
shape = X$Shape,
thickness = X$Thickness)
geom$effort = tfd(as.matrix(Y), arg = Gap)
geom_curve =
geom %>%
ggplot(aes(tf = effort)) + geom_spaghetti(alpha=0.15,color = "steelblue")
geom_curve+xlab("Gap (mm)")+ylab("Efforts (N)")
###############################################################################
geom = split(geom,geom$type)$P225M909
Xgeom = geom[,2:4]
Y = geom[,5:ncol(geom)]
Gap = seq(30,7,by=-0.5)
matplot(Gap,t(Y),type="l",color = "steelblue",lwd=0.5)
## packages
library(readxl)
library(fda)
library(tidyfun)
library(viridis)
library(tidyverse)
library(FactoMineR)
library(knitr)
library(CCA)
knitr::opts_knit$set(root.dir = "~/GitHub/MixPCA")  ### CHEMIN A MODIFIER
opts_chunk$set(error=TRUE,comment=NA)
source("~/GitHub/MixPCA/2_estimators.r")  ### CHEMIN A MODIFIER
geom = readxl::read_xlsx("geometriePiece/ResultsAddedForExcel.xlsx",col_names=TRUE,skip=1)
colnames(geom)[1] = "type"
geom$type = as.factor(geom$type)
geom = split(geom,geom$type)$P225M909
Xgeom = geom[,2:4]
Y = geom[,5:ncol(geom)]
Gap = seq(30,7,by=-0.5)
matplot(Gap,t(Y),type="l",color = "steelblue",lwd=0.5)
geom = split(geom,geom$type)$P225M909
Xgeom = geom[,2:4]
Y = geom[,5:ncol(geom)]
Gap = seq(30,7,by=-0.5)
matplot(Gap,t(Y),type="l",col = "steelblue",lwd=0.5)
geom = split(geom,geom$type)$P225M909
Xgeom = geom[,2:4]
Y = geom[,5:ncol(geom)]
Gap = seq(30,7,by=-0.5)
matplot(Gap,t(Y),type="l",col = "steelblue",lwd=0.3)
geom = split(geom,geom$type)$P225M909
Xgeom = geom[,2:4]
Y = geom[,5:ncol(geom)]
Gap = seq(30,7,by=-0.5)
matplot(Gap,t(Y),type="l",col = "steelblue",lwd=0.3,lty=1)
geom = split(geom,geom$type)$P225M909
Xgeom = geom[,2:4]
Y = geom[,5:ncol(geom)]
Gap = seq(30,7,by=-0.5)
matplot(Gap,t(Y),type="l",col = "steelblue",lwd=0.25,lty=1)
geom = split(geom,geom$type)$P225M909
Xgeom = geom[,2:4]
Y = geom[,5:ncol(geom)]
Gap = seq(30,7,by=-0.5)
matplot(Gap,t(Y),type="l",col = "steelblue",lwd=0.25,lty=1,xlab="Gap (mm)"+ylab="Efforts (N)")
geom = split(geom,geom$type)$P225M909
Xgeom = geom[,2:4]
Y = geom[,5:ncol(geom)]
Gap = seq(30,7,by=-0.5)
matplot(Gap,t(Y),type="l",col = "steelblue",lwd=0.25,lty=1,xlab="Gap (mm)",ylab="Efforts (N)")
